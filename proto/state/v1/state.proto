syntax = "proto3";

package state.v1;

option go_package = "github.com/form3tech-oss/x-pdb/pkg/proto/state";

// State is the service that allows x-pdb servers to talk with
// each other.
service StateService {
  // Acquires a lock on the local cluster using the specified leaseHolderIdentity.
  rpc Lock(LockRequest) returns (LockResponse) {}

  // Acquires a lock on all the clusters using the specified leaseHolderIdentity
  rpc LockAll(LockAllRequest) returns (LockAllResponse) {}

  // Frees a lock on the local cluster if the lease identity matches.
  rpc Unlock(UnlockRequest) returns (UnlockResponse) {}

  // Frees a lock on all clusters if the lease identity matches.
  rpc UnlockAll(UnlockAllRequest) returns (UnlockAllResponse) {}

  // Verifies if a pod can be disrupted
  rpc CanPodBeDisrupted(CanPodBeDisruptedRequest) returns (CanPodBeDisruptedResponse) {}

  // Calculates the expected count based off the Deployment/StatefulSet/ReplicaSet number of replicas or - if implemented - a `scale` sub resource.
  rpc GetState(GetStateRequest) returns (GetStateResponse) {}
}

message CanPodBeDisruptedRequest {
  string namespace = 1;

  string name = 2;

  string xpdb_name = 3;
}

message CanPodBeDisruptedResponse {
  bool allowed = 1;
}

// LockRequest has the information to request a xpdb to be
// locked on a cluster.
message LockAllRequest {
  // The lease_holder_identity of the lock that is going to be created on the cluster.
  string lease_holder_identity = 1;

  // Namespace of the xpdb to be locked.
  string namespace = 2;

  // LabelSelector used on the xpdb resource to be locked.
  LabelSelector label_selector = 3;
}

// LockResponse has the information on wether a lock was succeeded or not.
message LockAllResponse {
  // Refers to wether the lock was acquired or not.
  bool acquired = 1;

  // Error has the error occured during the lock process.
  string error = 2;
}

// LockRequest has the information to request a xpdb to be
// locked on a cluster.
message LockRequest {
  // The lease_holder_identity of the lock that is going to be created on the cluster.
  string lease_holder_identity = 1;

  // Namespace of the xpdb to be locked.
  string namespace = 2;

  // LabelSelector used on the xpdb resource to be locked.
  LabelSelector label_selector = 3;
}

// LockResponse has the information on wether a lock was succeeded or not.
message LockResponse {
  // Refers to wether the lock was acquired or not.
  bool acquired = 1;

  // Error has the error occured during the lock process.
  string error = 2;
}

// UnlockRequest has the information to request a xpdb to be unlocked.
message UnlockRequest {
  // The leaseHolderIdentity of the lock that is going to be deleted on the cluster.
  string lease_holder_identity = 1;

  // Namespace of the xpdb to be unlocked.
  string namespace = 2;

  // LabelSelector used on the xpdb resource to be locked.
  LabelSelector label_selector = 3;
}

// LockResponse has the information on wether an unlock was succeeded or not.
message UnlockResponse {
  // Refers to wether the lock was unlocked or not.
  bool unlocked = 1;

  // Error has the error occured during the unlock process.
  string error = 2;
}

// UnlockAllRequest has the information to request a xpdb to be unlocked.
message UnlockAllRequest {
  // The leaseHolderIdentity of the lock that is going to be deleted on the cluster.
  string lease_holder_identity = 1;

  // Namespace of the xpdb to be unlocked.
  string namespace = 2;

  // LabelSelector used on the xpdb resource to be locked.
  LabelSelector label_selector = 3;
}

// UnlockAllResponse has the information on wether an unlock was succeeded or not.
message UnlockAllResponse {
  // Refers to wether the lock was unlocked or not.
  bool unlocked = 1;

  // Error has the error occured during the unlock process.
  string error = 2;
}

// Gets the state of the pods captured by a xpdb label selector
message GetStateRequest {
  // Namespace of the xpdb to get.
  string namespace = 1;

  // LabelSelector of the xpdb to get the state from.
  LabelSelector label_selector = 2;
}

// Response of the GetState
message GetStateResponse {
  // Number of desired healthy pods captured by a xpdb label selector
  int32 desired_healthy = 1;

  // Number of healthy pods captured by a xpdb label selector
  int32 healthy = 2;
}

// A label selector is a label query over a set of resources. The result of matchLabels and
// matchExpressions are ANDed. An empty label selector matches all objects. A null
// label selector matches no objects.
// +structType=atomic
message LabelSelector {
  // matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
  // map is equivalent to an element of matchExpressions, whose key field is "key", the
  // operator is "In", and the values array contains only "value". The requirements are ANDed.
  // +optional
  map<string, string> match_labels = 1;

  // matchExpressions is a list of label selector requirements. The requirements are ANDed.
  // +optional
  // +listType=atomic
  repeated LabelSelectorRequirement match_expressions = 2;
}

// A label selector requirement is a selector that contains values, a key, and an operator that
// relates the key and values.
message LabelSelectorRequirement {
  // key is the label key that the selector applies to.
  optional string key = 1;

  // operator represents a key's relationship to a set of values.
  // Valid operators are In, NotIn, Exists and DoesNotExist.
  optional string operator = 2;

  // values is an array of string values. If the operator is In or NotIn,
  // the values array must be non-empty. If the operator is Exists or DoesNotExist,
  // the values array must be empty. This array is replaced during a strategic
  // merge patch.
  // +optional
  // +listType=atomic
  repeated string values = 3;
}
