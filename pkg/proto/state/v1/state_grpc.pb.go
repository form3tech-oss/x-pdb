// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: state/v1/state.proto

package state

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	StateService_Lock_FullMethodName              = "/state.v1.StateService/Lock"
	StateService_LockAll_FullMethodName           = "/state.v1.StateService/LockAll"
	StateService_Unlock_FullMethodName            = "/state.v1.StateService/Unlock"
	StateService_UnlockAll_FullMethodName         = "/state.v1.StateService/UnlockAll"
	StateService_CanPodBeDisrupted_FullMethodName = "/state.v1.StateService/CanPodBeDisrupted"
	StateService_GetState_FullMethodName          = "/state.v1.StateService/GetState"
)

// StateServiceClient is the client API for StateService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// State is the service that allows x-pdb servers to talk with
// each other.
type StateServiceClient interface {
	// Acquires a lock on the local cluster using the specified leaseHolderIdentity.
	Lock(ctx context.Context, in *LockRequest, opts ...grpc.CallOption) (*LockResponse, error)
	// Acquires a lock on all the clusters using the specified leaseHolderIdentity
	LockAll(ctx context.Context, in *LockAllRequest, opts ...grpc.CallOption) (*LockAllResponse, error)
	// Frees a lock on the local cluster if the lease identity matches.
	Unlock(ctx context.Context, in *UnlockRequest, opts ...grpc.CallOption) (*UnlockResponse, error)
	// Frees a lock on all clusters if the lease identity matches.
	UnlockAll(ctx context.Context, in *UnlockAllRequest, opts ...grpc.CallOption) (*UnlockAllResponse, error)
	// Verifies if a pod can be disrupted
	CanPodBeDisrupted(ctx context.Context, in *CanPodBeDisruptedRequest, opts ...grpc.CallOption) (*CanPodBeDisruptedResponse, error)
	// Calculates the expected count based off the Deployment/StatefulSet/ReplicaSet number of replicas or - if implemented - a `scale` sub resource.
	GetState(ctx context.Context, in *GetStateRequest, opts ...grpc.CallOption) (*GetStateResponse, error)
}

type stateServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStateServiceClient(cc grpc.ClientConnInterface) StateServiceClient {
	return &stateServiceClient{cc}
}

func (c *stateServiceClient) Lock(ctx context.Context, in *LockRequest, opts ...grpc.CallOption) (*LockResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LockResponse)
	err := c.cc.Invoke(ctx, StateService_Lock_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stateServiceClient) LockAll(ctx context.Context, in *LockAllRequest, opts ...grpc.CallOption) (*LockAllResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LockAllResponse)
	err := c.cc.Invoke(ctx, StateService_LockAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stateServiceClient) Unlock(ctx context.Context, in *UnlockRequest, opts ...grpc.CallOption) (*UnlockResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnlockResponse)
	err := c.cc.Invoke(ctx, StateService_Unlock_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stateServiceClient) UnlockAll(ctx context.Context, in *UnlockAllRequest, opts ...grpc.CallOption) (*UnlockAllResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnlockAllResponse)
	err := c.cc.Invoke(ctx, StateService_UnlockAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stateServiceClient) CanPodBeDisrupted(ctx context.Context, in *CanPodBeDisruptedRequest, opts ...grpc.CallOption) (*CanPodBeDisruptedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CanPodBeDisruptedResponse)
	err := c.cc.Invoke(ctx, StateService_CanPodBeDisrupted_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stateServiceClient) GetState(ctx context.Context, in *GetStateRequest, opts ...grpc.CallOption) (*GetStateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetStateResponse)
	err := c.cc.Invoke(ctx, StateService_GetState_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StateServiceServer is the server API for StateService service.
// All implementations must embed UnimplementedStateServiceServer
// for forward compatibility.
//
// State is the service that allows x-pdb servers to talk with
// each other.
type StateServiceServer interface {
	// Acquires a lock on the local cluster using the specified leaseHolderIdentity.
	Lock(context.Context, *LockRequest) (*LockResponse, error)
	// Acquires a lock on all the clusters using the specified leaseHolderIdentity
	LockAll(context.Context, *LockAllRequest) (*LockAllResponse, error)
	// Frees a lock on the local cluster if the lease identity matches.
	Unlock(context.Context, *UnlockRequest) (*UnlockResponse, error)
	// Frees a lock on all clusters if the lease identity matches.
	UnlockAll(context.Context, *UnlockAllRequest) (*UnlockAllResponse, error)
	// Verifies if a pod can be disrupted
	CanPodBeDisrupted(context.Context, *CanPodBeDisruptedRequest) (*CanPodBeDisruptedResponse, error)
	// Calculates the expected count based off the Deployment/StatefulSet/ReplicaSet number of replicas or - if implemented - a `scale` sub resource.
	GetState(context.Context, *GetStateRequest) (*GetStateResponse, error)
	mustEmbedUnimplementedStateServiceServer()
}

// UnimplementedStateServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedStateServiceServer struct{}

func (UnimplementedStateServiceServer) Lock(context.Context, *LockRequest) (*LockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Lock not implemented")
}
func (UnimplementedStateServiceServer) LockAll(context.Context, *LockAllRequest) (*LockAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LockAll not implemented")
}
func (UnimplementedStateServiceServer) Unlock(context.Context, *UnlockRequest) (*UnlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unlock not implemented")
}
func (UnimplementedStateServiceServer) UnlockAll(context.Context, *UnlockAllRequest) (*UnlockAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnlockAll not implemented")
}
func (UnimplementedStateServiceServer) CanPodBeDisrupted(context.Context, *CanPodBeDisruptedRequest) (*CanPodBeDisruptedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CanPodBeDisrupted not implemented")
}
func (UnimplementedStateServiceServer) GetState(context.Context, *GetStateRequest) (*GetStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetState not implemented")
}
func (UnimplementedStateServiceServer) mustEmbedUnimplementedStateServiceServer() {}
func (UnimplementedStateServiceServer) testEmbeddedByValue()                      {}

// UnsafeStateServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StateServiceServer will
// result in compilation errors.
type UnsafeStateServiceServer interface {
	mustEmbedUnimplementedStateServiceServer()
}

func RegisterStateServiceServer(s grpc.ServiceRegistrar, srv StateServiceServer) {
	// If the following call pancis, it indicates UnimplementedStateServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&StateService_ServiceDesc, srv)
}

func _StateService_Lock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateServiceServer).Lock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StateService_Lock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateServiceServer).Lock(ctx, req.(*LockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StateService_LockAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LockAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateServiceServer).LockAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StateService_LockAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateServiceServer).LockAll(ctx, req.(*LockAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StateService_Unlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateServiceServer).Unlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StateService_Unlock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateServiceServer).Unlock(ctx, req.(*UnlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StateService_UnlockAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnlockAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateServiceServer).UnlockAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StateService_UnlockAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateServiceServer).UnlockAll(ctx, req.(*UnlockAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StateService_CanPodBeDisrupted_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CanPodBeDisruptedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateServiceServer).CanPodBeDisrupted(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StateService_CanPodBeDisrupted_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateServiceServer).CanPodBeDisrupted(ctx, req.(*CanPodBeDisruptedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StateService_GetState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateServiceServer).GetState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StateService_GetState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateServiceServer).GetState(ctx, req.(*GetStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StateService_ServiceDesc is the grpc.ServiceDesc for StateService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StateService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "state.v1.StateService",
	HandlerType: (*StateServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Lock",
			Handler:    _StateService_Lock_Handler,
		},
		{
			MethodName: "LockAll",
			Handler:    _StateService_LockAll_Handler,
		},
		{
			MethodName: "Unlock",
			Handler:    _StateService_Unlock_Handler,
		},
		{
			MethodName: "UnlockAll",
			Handler:    _StateService_UnlockAll_Handler,
		},
		{
			MethodName: "CanPodBeDisrupted",
			Handler:    _StateService_CanPodBeDisrupted_Handler,
		},
		{
			MethodName: "GetState",
			Handler:    _StateService_GetState_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "state/v1/state.proto",
}
