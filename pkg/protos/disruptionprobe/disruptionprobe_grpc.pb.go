// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.28.3
// source: protos/disruptionprobe/disruptionprobe.proto

package disruptionprobe

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DisruptionProbeClient is the client API for DisruptionProbe service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DisruptionProbeClient interface {
	// Sends a IsDisruptionAllowed request
	IsDisruptionAllowed(ctx context.Context, in *IsDisruptionAllowedRequest, opts ...grpc.CallOption) (*IsDisruptionAllowedResponse, error)
}

type disruptionProbeClient struct {
	cc grpc.ClientConnInterface
}

func NewDisruptionProbeClient(cc grpc.ClientConnInterface) DisruptionProbeClient {
	return &disruptionProbeClient{cc}
}

func (c *disruptionProbeClient) IsDisruptionAllowed(ctx context.Context, in *IsDisruptionAllowedRequest, opts ...grpc.CallOption) (*IsDisruptionAllowedResponse, error) {
	out := new(IsDisruptionAllowedResponse)
	err := c.cc.Invoke(ctx, "/disruptionprobe.DisruptionProbe/IsDisruptionAllowed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DisruptionProbeServer is the server API for DisruptionProbe service.
// All implementations must embed UnimplementedDisruptionProbeServer
// for forward compatibility
type DisruptionProbeServer interface {
	// Sends a IsDisruptionAllowed request
	IsDisruptionAllowed(context.Context, *IsDisruptionAllowedRequest) (*IsDisruptionAllowedResponse, error)
	mustEmbedUnimplementedDisruptionProbeServer()
}

// UnimplementedDisruptionProbeServer must be embedded to have forward compatible implementations.
type UnimplementedDisruptionProbeServer struct {
}

func (UnimplementedDisruptionProbeServer) IsDisruptionAllowed(context.Context, *IsDisruptionAllowedRequest) (*IsDisruptionAllowedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsDisruptionAllowed not implemented")
}
func (UnimplementedDisruptionProbeServer) mustEmbedUnimplementedDisruptionProbeServer() {}

// UnsafeDisruptionProbeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DisruptionProbeServer will
// result in compilation errors.
type UnsafeDisruptionProbeServer interface {
	mustEmbedUnimplementedDisruptionProbeServer()
}

func RegisterDisruptionProbeServer(s grpc.ServiceRegistrar, srv DisruptionProbeServer) {
	s.RegisterService(&DisruptionProbe_ServiceDesc, srv)
}

func _DisruptionProbe_IsDisruptionAllowed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsDisruptionAllowedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DisruptionProbeServer).IsDisruptionAllowed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/disruptionprobe.DisruptionProbe/IsDisruptionAllowed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DisruptionProbeServer).IsDisruptionAllowed(ctx, req.(*IsDisruptionAllowedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DisruptionProbe_ServiceDesc is the grpc.ServiceDesc for DisruptionProbe service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DisruptionProbe_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "disruptionprobe.DisruptionProbe",
	HandlerType: (*DisruptionProbeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IsDisruptionAllowed",
			Handler:    _DisruptionProbe_IsDisruptionAllowed_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/disruptionprobe/disruptionprobe.proto",
}
